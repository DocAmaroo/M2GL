'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 16 October 2020 at 11:40:49.549902 am'!Object subclass: #RefactorPile	instanceVariableNames: ''	classVariableNames: 'saveGrow'	package: 'ExosPharo-7-Metaprog'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RefactorPile class	instanceVariableNames: ''!!RefactorPile class methodsFor: 'do/undo' stamp: 'cd 10/4/2019 12:25'!undo	"RefactorPile undo"	| existClass |	"défaire l'exercice pour pouvoir le refaire"	"détruire PileGrossissante si elle existe"	existClass := Smalltalk classNamed: #PileGrossissante.	existClass isNil		ifFalse: [ "noter les 2 liens à mettre à jour"			Smalltalk removeClassNamed: #PileGrossissante.			Pile removeSubclass: #PileGrossissante ].	"remettre la méthode grow (sauvegardée dans la variable de classe saveGrow) dans le dictionnaire de Pile"	Pile addSelector: #grow withMethod: saveGrow! !!RefactorPile class methodsFor: 'do/undo' stamp: 'cd 10/16/2020 10:12'!initialize	"saveGrow est une variable de classe de RefactorPile"	saveGrow		ifNil: [ saveGrow := 			           [ Pile compiledMethodAt: #grow ]									on: KeyNotFound									do: [ self error: 'Definir grow sur Pile avant de commencer svp' ] ]! !!RefactorPile class methodsFor: 'do/undo' stamp: 'cd 10/16/2020 11:22'!do	"RefactorPile do"	| growCompiledMethod pushMethod newClass classPile |		saveGrow		ifNil: [ self				error:					'action impossible à cet instant,			      définir grow sur Pile puis éxécuter "RefactorPile initialize" avant de relancer' ]		ifNotNil: [ 			"c'est parti"			"défaire l'exercice s'il a déjà été fait, pour pouvoir le refaire"			self undo.			"rérérencer la classe Pile dans une variable"			classPile := Smalltalk classNamed: #Pile.						"créer la classe #PileGrossissante, si elle n'existe pas déjà"			"créée dans le même package que Pile"			classPile				subclass: #PileGrossissante				instanceVariableNames: ''				classVariableNames: ''				package: classPile category.			"rérérencer la classe PileGrossissante dans une variable"			newClass := Smalltalk classNamed: #PileGrossissante.			"récupérer la méthode compilée grow dans le dictionnaire des méthodes de Pile"			growCompiledMethod := Pile compiledMethodAt: #grow.						"enlever la clé grow du dictionnaire des méthodes de la classe Pile"			Pile removeSelector: #grow.			"ajouter la méthode récupérée au dictionnaire des méthodes de PileGrossissante"			newClass addSelector: #grow withMethod: growCompiledMethod.			"fabriquer le code de la méthode push: de PileGrossissante, et le compiler"			"; est la cascade de message"			pushMethod := OpalCompiler new				source:					'push: o\  self isFull\    ifTrue: [self grow].\  ^super push: o'						withCRs;				class: newClass;				compile.			"ajouter la nouvelle méthode compilee dans le dictionnaire des méthodes de la nouvelle classe"			newClass addSelector: #push: withMethod: pushMethod.						"SystemAnnouncer uniqueInstance methodAdded: pushMethod."					"en principe c'est terminé, on peut exécuter le test"]! !RefactorPile initialize!