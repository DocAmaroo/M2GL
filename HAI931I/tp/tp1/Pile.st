'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 13 September 2021 at 11:53:00.557922 am'!Object subclass: #Pile	instanceVariableNames: 'contenu index capacite'	classVariableNames: 'tailleDefaut'	package: 'HAI731-PileBase'!!Pile commentStamp: 'cd 4/2/2021 09:57' prior: 0!Implantation d'une pile en utilisant une collection ordonn√©e.!!Pile methodsFor: 'tests' stamp: 'cd 4/7/2020 13:31'!intercept: x	self halt.! !!Pile methodsFor: 'tests' stamp: 'cd 4/7/2020 13:31'!test	self intercept: 33.! !!Pile methodsFor: 'printing' stamp: 'cd 4/11/2021 12:38'!printOn2: aStream	"Cette m√©thode est appel√©e par la m√©thode printString qui fabrique une repr√©sentation du    receveur sous forme de cha√Æne.	 PrintString est elle-m√™me appel√©e par les outils de l'environnement, par exemple par la    m√©thode printIt du Playground."	aStream nextPutAll: 'une '; nextPutAll: self class name; nextPutAll: ': ('.	contenu		do: [ :each | 			each printOn: aStream.			aStream space ].	aStream nextPut: $)! !!Pile methodsFor: 'printing' stamp: 'cd 4/2/2021 10:20'!printOn: aStream	"Cette m√©thode est appel√©e par la m√©thode printString qui fabrique une repr√©sentation du    receveur sous forme de cha√Æne.	 PrintString est elle-m√™me appel√©e par les outils de l'environnement, par exemple par la    m√©thode printIt du Playground."	aStream nextPutAll: 'une ', self class name , ': ('.	contenu		do: [ :each | 			each printOn: aStream.			aStream space ].	aStream nextPut: $)! !!Pile methodsFor: 'enumerating' stamp: 'cd 9/28/2018 10:21'!do: aBlock	"un it√©rateur pour la classe Pile"	contenu do: aBlock! !!Pile methodsFor: 'private' stamp: 'cd 3/22/2019 18:28'!contenuEqual: contenuDeLaPileQueLonCompareAvecLeReceveur	^contenu = contenuDeLaPileQueLonCompareAvecLeReceveur! !!Pile methodsFor: 'comparing' stamp: 'cd 3/22/2019 18:28'!= uneAutrePile	"une solution pour √©crire = sans  mettre un accesseur en lecture sur le buffer"	^uneAutrePile contenuEqual: contenu! !!Pile methodsFor: 'm√©tier' stamp: 'cd 3/28/2018 13:06'!size	"donne le nombre d'√©l√©ments empil√©s"	^index		"^contenu count: [ :each | each isNotNil ]"	! !!Pile methodsFor: 'm√©tier' stamp: 'cd 4/10/2021 17:40'!pop	"d√©pile et rend le sommet de pile si la pile n'est pas vide"	| retour |	self isEmpty		ifFalse: [			retour := contenu at: index.			index := index - 1.			^retour]		ifTrue: [ self error: 'Pile vide, Impossible de d√©piler' ]! !!Pile methodsFor: 'm√©tier' stamp: 'cd 3/28/2018 12:55'!top	"rend le sommet de pile si la pile n'est pas vide, sans d√©piler"	self isEmpty		ifFalse: [ ^contenu at: index]		ifTrue: [ self error: 'Rien au sommet d''une pile vide' ]! !!Pile methodsFor: 'm√©tier' stamp: 'cd 3/8/2017 12:25'!push: anObject	"met anObject dans contenu au bon index si la pile n'est pas pleine"	self isFull		ifFalse: [			index := index + 1.			contenu at: index put: anObject.]		ifTrue: [ self error: 'Impossible d''empiler sur une pile pleine' ]! !!Pile methodsFor: 'm√©tier' stamp: 'cd 4/13/2021 16:01'!isEmpty	^index = 0.! !!Pile methodsFor: 'm√©tier' stamp: 'cd 3/28/2018 13:01'!capacity	^capacite	! !!Pile methodsFor: 'm√©tier' stamp: 'cd 3/28/2018 12:53'!isFull	^index = capacite! !!Pile methodsFor: 'm√©tier' stamp: 'cd 4/2/2021 10:15'!push2: element	self isFull		ifFalse: [index := index + 1.				contenu at:index put: element.]		ifTrue: [self error: 'Pile pleine'].! !!Pile methodsFor: 'initialization' stamp: 'cd 3/15/2019 11:14'!initialize	self initialize: tailleDefaut	! !!Pile methodsFor: 'initialization' stamp: 'cd 4/16/2021 09:24'!initialize: taille	"initialise les attribus d'une pile nouvellement cr√©√©e"	"la pile est vide quand index = 0"	index := 0.	"la pile est pleine quand index = capacite"	capacite := taille.	"le contenu est repr√©sent√© par un tableau"	contenu := Array new: capacite.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pile class	instanceVariableNames: 'listeInstance'!!Pile class methodsFor: 'accessingMR' stamp: 'cd 3/13/2019 17:45'!listeInstances	"ignorez cette m√©thode pour le TP1 L3"	^listeInstance ! !!Pile class methodsFor: 'instance creation' stamp: 'cd 4/16/2021 09:03'!newFlorian: taille	^(super new) initialize: taille.	! !!Pile class methodsFor: 'instance creation' stamp: 'cd 3/13/2019 17:41'!initialize	"initialisation de la variable de classe representant une propriete partagee par toutes les instances"	tailleDefaut := 5.	"ignorez ce qui est en dessous pour le tp1 L3"	"initialisation de la variable d'instance de m√©taclasse representant une propriete de la classe Pile"	listeInstance := OrderedCollection new.! !!Pile class methodsFor: 'instance creation' stamp: 'cd 4/16/2021 09:02'!newErwan: n|p|p := self new.p initialize n.^p.			! !!Pile class methodsFor: 'instance creation' stamp: 'cd 4/6/2021 15:57'!new	"Ceci est une m√©thode de class.	Que vaut 'self'? La classe √† laquelle a √©t√© envoy√© le message ...	donc la class Pile ou une de ses sous-classes"	^(super new) initialize! !!Pile class methodsFor: 'examples' stamp: 'cd 3/28/2018 14:39'!example	"self example" 	"Un exemple de la fa√ßon dont on peut utiliser une pile dans un programme"	| p |	p := Pile new.	p push: 33.	p push: 'une chaine'.	p push: 2 @ 3.	p push: 5 factorial.	p push: p isFull.	p pop.	p push: p size.	^p! !!Pile class methodsFor: 'examplesMR' stamp: 'cd 10/12/2018 12:05'!exampleMemo1	"self exampleMemo" 	"v√©rifier la liste des instances"	| p p2 |	p := Pile new.	p push: 33.	p push: 'une chaine'.	p push: 2 @ 3.	p2 := Pile new.	^Pile listeInstances! !!Pile class methodsFor: 'examplesMR' stamp: 'cd 10/12/2018 11:43'!exampleMemo	"self exampleMemo" 	"v√©rifier la liste des instances"	| p p2 |	p := Pile new.	p push: 33.	p push: 'une chaine'.	p push: 2 @ 3.	p2 := Pile new.	^Pile listeInstances! !!Pile class methodsFor: 'instanceCreationMR' stamp: 'cd 9/25/2020 11:08'!new: taille	"Ceci est une m√©thode de classe.	Que vaut 'self'? La classe √† laquelle a √©t√© envoy√© le message new:	donc la class Pile ou une de ses sous-classes"		^super new initialize: taille.! !Pile initialize!